// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: likes.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createLike = `-- name: CreateLike :one
INSERT INTO likes (id, created_at, updated_at, user_id, post_id) 
VALUES ($1, $2, $3, $4, $5)
RETURNING id, created_at, updated_at, user_id, post_id
`

type CreateLikeParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	PostID    uuid.UUID
}

func (q *Queries) CreateLike(ctx context.Context, arg CreateLikeParams) (Like, error) {
	row := q.db.QueryRowContext(ctx, createLike,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
		arg.PostID,
	)
	var i Like
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.PostID,
	)
	return i, err
}

const deleteLike = `-- name: DeleteLike :one
DELETE FROM likes WHERE post_id = $1
RETURNING id, created_at, updated_at, user_id, post_id
`

func (q *Queries) DeleteLike(ctx context.Context, postID uuid.UUID) (Like, error) {
	row := q.db.QueryRowContext(ctx, deleteLike, postID)
	var i Like
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.PostID,
	)
	return i, err
}

const getLikesByPost = `-- name: GetLikesByPost :one
SELECT
    posts.id AS post_id,
    posts.post,  
    posts.user_id,
    COALESCE(COUNT(likes.id), 0)::INT AS likes_count
FROM
    posts
LEFT JOIN
    likes ON posts.id = likes.post_id
WHERE
    posts.id = $1
GROUP BY
    posts.id, posts.post, posts.user_id
`

type GetLikesByPostRow struct {
	PostID     uuid.UUID
	Post       string
	UserID     uuid.UUID
	LikesCount int32
}

func (q *Queries) GetLikesByPost(ctx context.Context, id uuid.UUID) (GetLikesByPostRow, error) {
	row := q.db.QueryRowContext(ctx, getLikesByPost, id)
	var i GetLikesByPostRow
	err := row.Scan(
		&i.PostID,
		&i.Post,
		&i.UserID,
		&i.LikesCount,
	)
	return i, err
}
