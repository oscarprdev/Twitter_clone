// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: likes.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createLike = `-- name: CreateLike :one
INSERT INTO likes (id, created_at, updated_at, user_id, like_to) 
VALUES ($1, $2, $3, $4, $5)
RETURNING id, created_at, updated_at, user_id, like_to
`

type CreateLikeParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	LikeTo    uuid.UUID
}

func (q *Queries) CreateLike(ctx context.Context, arg CreateLikeParams) (Like, error) {
	row := q.db.QueryRowContext(ctx, createLike,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
		arg.LikeTo,
	)
	var i Like
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.LikeTo,
	)
	return i, err
}

const deleteLike = `-- name: DeleteLike :one
DELETE FROM likes WHERE user_id = $1
RETURNING id, created_at, updated_at, user_id, like_to
`

func (q *Queries) DeleteLike(ctx context.Context, userID uuid.UUID) (Like, error) {
	row := q.db.QueryRowContext(ctx, deleteLike, userID)
	var i Like
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.LikeTo,
	)
	return i, err
}

const getUserLikes = `-- name: GetUserLikes :one
SELECT like_to, COUNT(*) AS likes_count
FROM likes
WHERE like_to = $1
GROUP BY like_to
`

type GetUserLikesRow struct {
	LikeTo     uuid.UUID
	LikesCount int64
}

func (q *Queries) GetUserLikes(ctx context.Context, likeTo uuid.UUID) (GetUserLikesRow, error) {
	row := q.db.QueryRowContext(ctx, getUserLikes, likeTo)
	var i GetUserLikesRow
	err := row.Scan(&i.LikeTo, &i.LikesCount)
	return i, err
}

const getUsersFromLikes = `-- name: GetUsersFromLikes :many
SELECT users.username, users.id AS user_like
FROM likes
JOIN users ON likes.user_id = users.id
WHERE likes.like_to = $1
`

type GetUsersFromLikesRow struct {
	Username string
	UserLike uuid.UUID
}

func (q *Queries) GetUsersFromLikes(ctx context.Context, likeTo uuid.UUID) ([]GetUsersFromLikesRow, error) {
	rows, err := q.db.QueryContext(ctx, getUsersFromLikes, likeTo)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersFromLikesRow
	for rows.Next() {
		var i GetUsersFromLikesRow
		if err := rows.Scan(&i.Username, &i.UserLike); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
