// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: users.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, created_at, updated_at, username, email, name, surname, password, profile_img_url, profile_bg_img_url) 
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
RETURNING id, created_at, updated_at, username, email, name, surname, password, profile_img_url, profile_bg_img_url
`

type CreateUserParams struct {
	ID              uuid.UUID
	CreatedAt       time.Time
	UpdatedAt       time.Time
	Username        string
	Email           string
	Name            string
	Surname         string
	Password        string
	ProfileImgUrl   string
	ProfileBgImgUrl string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Username,
		arg.Email,
		arg.Name,
		arg.Surname,
		arg.Password,
		arg.ProfileImgUrl,
		arg.ProfileBgImgUrl,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.Email,
		&i.Name,
		&i.Surname,
		&i.Password,
		&i.ProfileImgUrl,
		&i.ProfileBgImgUrl,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :one
DELETE FROM users WHERE id = $1
RETURNING id, created_at, updated_at, username, email, name, surname, password, profile_img_url, profile_bg_img_url
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, deleteUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.Email,
		&i.Name,
		&i.Surname,
		&i.Password,
		&i.ProfileImgUrl,
		&i.ProfileBgImgUrl,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, created_at, updated_at, username, email, name, surname, password, profile_img_url, profile_bg_img_url FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.Email,
		&i.Name,
		&i.Surname,
		&i.Password,
		&i.ProfileImgUrl,
		&i.ProfileBgImgUrl,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, created_at, updated_at, username, email, name, surname, password, profile_img_url, profile_bg_img_url FROM users WHERE id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.Email,
		&i.Name,
		&i.Surname,
		&i.Password,
		&i.ProfileImgUrl,
		&i.ProfileBgImgUrl,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, created_at, updated_at, username, email, name, surname, password, profile_img_url, profile_bg_img_url FROM users WHERE username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.Email,
		&i.Name,
		&i.Surname,
		&i.Password,
		&i.ProfileImgUrl,
		&i.ProfileBgImgUrl,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, created_at, updated_at, username, email, name, surname, password, profile_img_url, profile_bg_img_url FROM users
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Username,
			&i.Email,
			&i.Name,
			&i.Surname,
			&i.Password,
			&i.ProfileImgUrl,
			&i.ProfileBgImgUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
    name = $1,
    surname = $2,
    password = $3,
    profile_img_url = $4,
    profile_bg_img_url = $5
WHERE
    id = $6
RETURNING id, created_at, updated_at, username, email, name, surname, password, profile_img_url, profile_bg_img_url
`

type UpdateUserParams struct {
	Name            string
	Surname         string
	Password        string
	ProfileImgUrl   string
	ProfileBgImgUrl string
	ID              uuid.UUID
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.Name,
		arg.Surname,
		arg.Password,
		arg.ProfileImgUrl,
		arg.ProfileBgImgUrl,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.Email,
		&i.Name,
		&i.Surname,
		&i.Password,
		&i.ProfileImgUrl,
		&i.ProfileBgImgUrl,
	)
	return i, err
}
